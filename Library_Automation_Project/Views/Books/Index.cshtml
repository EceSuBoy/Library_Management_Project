@model List<Library_Automation.Entities.Model.Kitaplar>

@{
    ViewBag.Title = "Books";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
}

<style>
    .book-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 12px;
        overflow: hidden;
    }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

    .book-cover {
        width: 100%;
        height: 280px;
        object-fit: cover;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
        transition: opacity 0.5s ease-in;
    }

    .book-info {
        padding: 1rem;
        background: linear-gradient(to right, #f8f9fa, #ffffff);
        border-bottom-left-radius: 12px;
        border-bottom-right-radius: 12px;
    }

    .book-title {
        font-size: 1.2rem;
        font-weight: 600;
    }

    .fade-in {
        opacity: 0;
        animation: fadeIn 0.8s ease-in forwards;
    }

    @@keyframes fadeIn {
        to {
            opacity: 1;
        }
    }

    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 30px;
    }

    .btn-custom-purple {
        color: #764ba2;
        border-color: #764ba2;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .btn-custom-purple:hover {
            background-color: #764ba2;
            color: #fff;
        }


    .pagination {
        display: flex;
        gap: 10px;
        padding: 10px 20px;
        border-radius: 12px;
        background: linear-gradient(to right, #ece9e6, #ffffff);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        animation: fadeIn 0.5s ease-in;
    }

        .pagination a {
            color: #333;
            text-decoration: none;
            padding: 6px 12px;
            border-radius: 8px;
            transition: all 0.3s;
        }

            .pagination a:hover {
                background-color: #764ba2;
                color: #fff;
            }

        .pagination .active {
            background-color: #764ba2;
            color: #fff;
            pointer-events: none;
        }
</style>

<!-- Add this above the book grid -->
<div class="container mb-4">
    <div class="row g-3 align-items-end">
        <!-- Search Input -->
        <div class="col-md-6">
            <label for="searchInput" class="form-label fw-bold">Search Books</label>
            <input type="text" id="searchInput" class="form-control" placeholder="Enter title, author, genre or description...">
        </div>

        <!-- Genre Filter -->
        <div class="col-md-3">
            <label for="genreSelect" class="form-label fw-bold">Filter by Genre</label>
            <select id="genreSelect" class="form-select">
                <option value="">All Genres</option>
                @foreach (var genre in ViewBag.AllGenres as List<string>)
                {
                    <option value="@genre">@genre</option>
                }
            </select>
        </div>

        <!-- Page Count Filter -->
        <div class="col-md-3">
            <label for="pageCount" class="form-label fw-bold">Min Page Count</label>
            <input type="number" id="pageCount" class="form-control" placeholder="e.g., 100">
        </div>
    </div>
</div>

<div class="container mt-5">
    <div class="row g-4">
        @foreach (var item in Model)
        {
            <div class="col-md-3 col-sm-6 fade-in">
                <div class="book-card shadow-sm h-100" data-pages="@item.SayfaSayisi">
                    <img src="@item.KapakResmi" alt="@item.KitapAdi" class="book-cover" onerror="this.src='/images/default-book.jpg';" />
                    <div class="book-info">
                        <div class="book-title">@item.KitapAdi</div>
                        <p class="text-muted mb-1">by @item.Yazari</p>
                        <p class="text-secondary small">@item.KitapTurleri.KitapTuru</p>
                        <a href="@Url.Action("Detail", "Books", new { id = item.Id })" class="btn btn-custom-purple btn-sm mt-2 w-100">View Details</a>
                    </div>
                </div>
            </div>
        }
    </div>


    @if (totalPages > 1)
    {
        <div class="pagination-container mt-4">
            <div class="pagination">
                @for (int i = 1; i <= totalPages; i++)
                {
                    if (i == currentPage)
                    {
                        <a href="@Url.Action("Index", "Books", new { page = i })" class="active">@i</a>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "Books", new { page = i })">@i</a>
                    }
                }
            </div>
        </div>
    }
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const genreSelect = document.getElementById("genreSelect");
        const pageCountInput = document.getElementById("pageCount");

        const filterBooks = () => {
            const searchTerm = searchInput.value.trim();
            const genre = genreSelect.value;
            const minPages = parseInt(pageCountInput.value) || 0;

            const bookCards = document.querySelectorAll(".book-card");

            bookCards.forEach(card => {
                const title = card.querySelector(".book-title").innerText.toLowerCase();
                const author = card.querySelector(".text-muted").innerText.toLowerCase();
                const genreText = card.querySelector(".text-secondary").innerText.toLowerCase();
                const pageCount = parseInt(card.dataset.pages) || 0;

                const matchesSearch = title.includes(searchTerm.toLowerCase()) || author.includes(searchTerm.toLowerCase()) || genreText.includes(searchTerm.toLowerCase());
                const matchesGenre = !genre || genreText === genre.toLowerCase();
                const matchesPages = pageCount >= minPages;

                if (matchesSearch && matchesGenre && matchesPages) {
                    card.parentElement.style.display = "block";
                } else {
                    card.parentElement.style.display = "none";
                }
            });
        };

        searchInput.addEventListener("input", filterBooks);
        genreSelect.addEventListener("change", filterBooks);
        pageCountInput.addEventListener("input", filterBooks);
    });
</script>
